#+Title: Twisted Mixing
#+Author: lvh
#+Email: _@lvh.io

#+OPTIONS: toc:nil reveal_rolling_links:nil num:nil reveal_history:true
#+REVEAL_TRANS: linear
#+REVEAL_THEME: lvh

* Introduction
** Rackspace

   #+ATTR_HTML: :style border:none
   [[./media/rackspace.svg]]

** Crypto 101

   #+ATTR_HTML: :width 600 :height 600 :style border:none :class pixelated
   [[./media/crypto101.png]]

** Twisted

   #+ATTR_HTML: :style border:none
   [[./media/twisted.svg]]

** About this talk

   Twisted code ↔ other code

   #+BEGIN_NOTES
   * "Twisted infects your entire codebase"
   * Show that you probably *can* use Twisted
      * (Not so much that you *should* use Twisted)
   * Overview
   #+END_NOTES

** Why Twisted?

   #+BEGIN_NOTES
   "The only reason anyone cares about Twisted is X"

   * IRC, SMTP, DNS, SSH, WebSockets...
   * Running multiple things in one process
   * Lots of simultaneous connections
   * Protocol and transport abstractions
   * Cooperation with existing event
   * Existing event loops: GUIs, gevent
   #+END_NOTES

** Prerequisites

    Python, some Twisted probably helps

    #+BEGIN_NOTES
    For this talk I'm going to assume I don't need to explain Python
    Some Twisted experience will undoubtedly help, but I will explain basics
    Show of hands: "how many people know how a reactor works?"
    It's really easy: unicorns, except for cfreactor which is faerie dust, except for IOCP which is made of Russian-grade sadness
    #+END_NOTES

* Introducing Twisted

** Reactor

   An object that reacts to events

   #+BEGIN_NOTES
   You register events, it waits for them, and dispatches when they happen
   Internally: event loop, except for test reactors e.g. =Clock=
   #+END_NOTES

** =IReactor{}=

   #+ATTR_REVEAL: :frag roll-in
   * =Time=: =callLater=...
   * =Process=: =spawnProcess=
   * =Threads=: =call(In|From)Thread=, ...
   * =(TCP|UDP|SSL|Multicast)=
   * =(UNIX|UNIXDatagram|Socket)=
   * =FDSet=: =(add|remove)(Reader|Writer)=, ...

   #+BEGIN_NOTES
   Examples of reactor interfaces to give you an idea what a reactor does
   Usually you call higher-level APIs!
   #+END_NOTES

** Deferred

   An object you get *now*,

   gets you result or failure *later*

   #+BEGIN_NOTES
   Why?
   * Many operations take time
   * *Can't* get a result right now
   #+END_NOTES

** Blocking API

   #+BEGIN_SRC python
   try:
       result = blocking_read()
   except SomeError as e:
       on_failure(e)
   else:
       on_result(result)
   #+END_SRC

   #+BEGIN_NOTES
   * Evaluate or raise some point in the future
   * Thread can't do anything else until then
   #+END_NOTES

** Deferred API

   #+BEGIN_SRC python
   d = async_read()
   d.addCallbacks(on_result, on_failure)
   #+END_SRC

   #+BEGIN_NOTES
   * Get an object representing the future result *now*
   * Get result (or failure) when it's available
   * Thread is free to do something else
   #+END_NOTES

** Inline callbacks

   #+BEGIN_SRC python
   try:
       result = yield async_read()
   except SomeError as e:
       on_failure(e)
   else:
       on_result(result)
   #+END_SRC

* Twisted and your app

** SOA

   Service Oriented Architecture

   #+BEGIN_NOTES
   * Perhaps your workplace has been infected with SOA!
   * If someone is giggling around you: fun fact: "SOA" means "STD" in Dutch
   * In programming: "Loosely coupled things that talk to each other"
   * Written in Gevent? Twisted? COBOL? Who cares!?
   * Work with Twisted, without touching existing code
   #+END_NOTES

** WSGI

   Web Server Gateway Interface

   #+ATTR_REVEAL: :frag roll-in
   =twistd web --wsgi=wsgi.app=

   #+BEGIN_NOTES
   Show of hands: how many of you:
   * have a WSGI application?
   * knew Twisted has a production quality WSGI server? (reveal point)
   #+END_NOTES

** Demo

   * Flask app, served by =t.w.wsgi=
   * Real-time chat, with =txsockjs=

   [[file:media/twistyflask-tox-run.mp4][Test run]], [[file:media/twistyflask-demo.mp4][demo]]

* Blocking code in Twisted

  #+BEGIN_NOTES
  Almost everything I'm about to say applies to pretty much any event-driven single-threaded thing
  #+END_NOTES

** Can't block reactor

   #+BEGIN_NOTES
   Production reactors are just event loops
   Twisted is single-threaded by default
   One thing at a time, all in the same thread
   Concurrency through asynchronous IO
   Blocking the reactor thread means nothing else happens
   #+END_NOTES

** Blocking IO

   #+BEGIN_SRC python
   def _getDataAtURL(url):
       return requests.get(url) # BLOCKS!
   #+END_SRC

** Blocking computation

   #+BEGIN_SRC python
   def _compute(n):
       x = 2
       for _ in xrange(n): # BLOCKS!
           x *= x
       send_somewhere(x)
   #+END_SRC

** Can't block reactor

   Alternatives:

   #+ATTR_REVEAL: :frag roll-in
   1. Don't block
   2. Block another thread

** Don't block

   IO bound? Asynchronous IO!

   CPU bound? Cooperate!

** Asynchronous I/O!

   =treq=: =requests=-like, but asynchronous
   #+BEGIN_SRC python
   def _getDataAtURL(url):
       return treq.get(url)
   #+END_SRC

** Cooperation!

   =t.internet.task.coiterate= & friends

   #+BEGIN_SRC python
   def _compute(n):
       x = 2
       for _ in xrange(n):
           x *= x
           yield # Yields to the reactor :)
       send_somewhere(x)

   coiterate(_compute(n))
   #+END_SRC

** Don't block?

   Avoiding blocking isn't always possible

   #+ATTR_REVEAL: :frag roll-in
   * Blocking API: =DBAPI2=, =WSGI=...
   * Opaque code: =scrypt=, =Pillow=...
   * Kernel/syscall level: file IO, ...

   #+BEGIN_NOTES
   Sometimes all of the above!
   #+END_NOTES

** Block somewhere else
   Can't block reactor thread

   → block a different one!

   #+ATTR_REVEAL: :frag roll-in
   * ... in the same process: =deferToThread=
   * ... in a child process: =spawnProcess=...
   * ... in a remote process: Ampoule, RPC...

   #+BEGIN_NOTES
   deferToThread is used by a lot of wrappers: adbapi, txscrypt
   #+END_NOTES

** deferToThread

   #+ATTR_REVEAL: :frag roll-in
   * Easy automagic deferreds!
   * Shared mutable state :-(

   #+BEGIN_NOTES
     * Many projects full of shared mutable state; Python module
       system!
     * Consequence of threads, not =deferToThread=
   #+END_NOTES

* Twisted in blocking code

** =itamarst/crochet=
** =setup()=

   #+BEGIN_NOTES
   * Spawns a thread, runs the reactor in it
   * Idempotent
   #+END_NOTES

** =@run_in_reactor=

   #+ATTR_REVEAL: :frag roll-in
   * Run in reactor thread (not the calling thread)
   * Return =EventualResult=

** =EventualResult=?

   #+ATTR_REVEAL: :frag roll-in
   * Synchronous analog of =Deferred=
   * =wait(timeout=None)=

** Example #1

    #+BEGIN_SRC python
    from twisted.web.client import getPage
    from crochet import setup, run_in_reactor
    setup()

    @run_in_reactor
    def download_page(url):
        return getPage(url)

    result = download_page("http://www.google.com")
    print result.wait()
    #+END_SRC


** Example #2

 * Twisted queries exchange rate every 30s
 * Flask app serves the latest exchange rate


 [[file:media/twistycrochet-demo.mp4][Demo]]

** Twisted part

   #+BEGIN_SRC python
   class ExchangeRate(object):
       # ...

       @run_in_reactor
       def start(self):
           # in reactor thread because of decorator
           self._lc = LoopingCall(self._download)
           self._lc.start(30, now=True)

       def _download(self):
           # in reactor thread because of LoopingCall
           d = getPage(url)
           # ...
   #+END_SRC

   #+BEGIN_NOTES
   Twisted code looks like regular Twisted code!
   (But remember the =@run_in_reactor=)
   #+END_NOTES

** Flask part

   #+BEGIN_SRC python
   @app.route('/')
   def index():
       # runs in whatever thread app.run() runs it in
       rate = EURUSD.latest_value()
       if rate is None:
           rate = "unavailable"
       return "EUR/USD rate: {0}.".format(rate)

   app.run()
   #+END_SRC

   #+BEGIN_NOTES
   Flask code looks like regular Flask code!
   #+END_NOTES

* Twisted in gevent

** =jyio/geventreactor=

** =install()=
** "Blocking" code

   gevent-style "blocking", i.e.  automagic suspending

     * Suspending the reactor greenlet: bad
     * Actually blocking anything: bad
     * Earlier =requests.get= example: probably okay

** Deferreds ↔ greenlets

  =r = waitForDeferred(d)=

  =d = waitForGreenlet(g)=

  #+BEGIN_NOTES
  * Bidirectional bridge
  * waitForDeferred = "wait" for deferred (suspend greenlet)
  * waitForGreenlet = produce deferred from greenlet
  #+END_NOTES

** Demo

   TODO

* Recap

** Twisted plays well with others

   #+ATTR_REVEAL: :frag roll-in
   * Many supported protocols
   * Cooperates with blocking code
   * Cooperates with most event loops

** Conclusion

   #+ATTR_REVEAL: :frag roll-in
   If you want to use Twisted, you probably can.

   #+ATTR_REVEAL: :frag roll-in
   That doesn't /necessarily/ mean it's a good idea.

   #+ATTR_REVEAL: :frag roll-in
   Although it obviously is ;-)

* Questions?
