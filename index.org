#+Title: Twisted Mixing
#+Author: Laurens Van Houtven
#+Email: @lvh

#+OPTIONS: toc:nil
#+REVEAL_TRANS: linear
#+REVEAL_THEME: night

* Introduction
** About me
   Hi, I'm =lvh=.

   I hack on Twisted.
   
** About this talk

   * Twisted code â†” other code
   * Show that you probably *can* use Twisted
      * (Not so much that you *should* use Twisted)
   * [insert overview here]

** Why should you care?
#+ATTR_REVEAL: :frag roll-in

   * Twisted has some cool stuff in it
     * IRC, SMTP, DNS, SSH, WebSockets...
     * timed events, sane process and thread management
     * run multiple things in one process
     * ...
   * Twisted vs other stuff: good at different things
     * many incoming connections e.g. a chat server
     * many outgoing connections e.g. a scraper
     * cooperate with existing event loops such as GUIs

** Prerequisites
#+ATTR_REVEAL: :frag roll-in

   * Ideally, just Python
   * Having played with Twisted probably helps
       * ... but I will explain important concepts briefly

** Code examples
#+ATTR_REVEAL: :frag roll-in

   Very practical, examples you can run on your machine

   * Flask app with SockJS chat and timed events
   * ??? asyncore telnet app with Twisted SSH server
   * ??? Gevent telnet app with Twisted SSH server

* Your app with Twisted

** Is there even a problem?

   Perhaps it's trivial to get started!

** SOA
#+ATTR_REVEAL: :frag roll-in
   * Service Oriented Architecture
     * "Loosely coupled things that talk to each other"

   * Written in Gevent? Twisted? Fortran? Who cares!?
   * Work with Twisted, without touching existing code

** WSGI
   #+ATTR_REVEAL: :frag roll-in
   * How many of you have a WSGI application?
   * Twisted can serve WSGI!
     #+BEGIN_SRC sh
     twistd web --wsgi=location.of.wsgi.app
     #+END_SRC
   * Not a toy web server, can be used in production
   * Twisted does CGI too, but I hope *you* don't

** Porting your app to Twisted
#+ATTR_REVEAL: :frag roll-in

   * No, it's not trivial
     * ... but cost is almost always overestimated
   * Clean, tested code helps
     * Keep verifying behavior
     * Tested code tends to be decoupled
   * If it's near impossible, it's probably a code smell

** Writing code that works on both

   * Not trivial, not hard either
   * Example: =praekelt/vumi=

** Demo time!

   * Flask app, served by Twisted
   * SockJS chat, also served by Twisted

** Demo notes

   * =Klein=: Flask-like basic API, except Twisted by default
   * Having data come from two sources is kind of dumb
     * ... but I have to have Flask do something, right? ;)
   * Quality!
     * No authentication, users are who they say they are
     * Duplicate usernames allowed
     * Protocol does dispatching + behavior
     * Still perfect test coverage ;)

* Blocking code in Twisted

** You can't block the reactor thread
#+ATTR_REVEAL: :frag roll-in
   * Twisted is event-driven
       * Production reactors are just event loops
       * =select=, =epoll=, =kqueue=, IOCP, =libev(ent)=...
   * Reactor runs in a thread, calls everything else
       * One thing at a time, all in the same thread
       * Concurrency through asynchronous IO
   * Blocking the reactor thread means nothing else happens

** Blocking in a callback is bad!
   * Blocking IO
    #+BEGIN_SRC python
    def _getDataAtURL(url):
        return requests.get(url).json() # BLOCKS!
    #+END_SRC

   * Blocking computation
    #+BEGIN_SRC python
    def _compute(n):
        x = 2
        for _ in xrange(n): # BLOCKS!
            x *= x
        send_somewhere(x)
    #+END_SRC

** We can't block in the reactor thread, so...
   1. Don't block
   2. Block somewhere else

** Don't block
   IO bound? Be asynchronous!

   CPU bound? Cooperate with the event loop!

** Asynchronous I/O version
   =treq=: =requests=-like, but asynchronous
   #+BEGIN_SRC python
   def _getDataAtURL(url):
       return treq.get(url).addCallback(treq.json_content)
   #+END_SRC

** Cooperative version
   =twisted.internet.task.coiterate= and friends
   #+BEGIN_SRC python
   def _compute(n):
       x = 2
       for _ in xrange(n):
           x *= x
           yield # Yields to the reactor :)
       send_somewhere(x)

   coiterate(_compute(n))
   #+END_SRC

** Avoiding blocking isn't always possible
   * Blocking API
     * =DBAPI2=, ...
   * Sometimes in C code you can't or don't want to mess with
     * =scrypt=, ...
   * Sometimes at a kernel/syscall level
     * File IO, ...

** Block somewhere else
   Can't block the reactor thread $\rarrow$ block a different one!

   #+ATTR_REVEAL: :frag roll-in
   * ... in the same process: =deferToThread=
     * often used by wrappers: =adbapi=, =txscrypt=...
   * ... in a child process: =spawnProcess= and friends
   * ... in a remote process: Ampoule, PB, Foolscap, RPC methods...

** deferToThread

   #+ATTR_REVEAL: :frag roll-in
   * Probably the easiest way to make things magically not block
   * Easy for the caller: everything =Deferred=!
   * State is *verboten*
     #+ATTR_REVEAL: :frag roll-in
     * Passing in a ={}=: crude, awful hack
       * but Python guarantees =dict= operations are atomic...
     * Got shared mutable state?
       * Django is full of it
       * Python modules are shared mutable state, too
     * Consequence of threads, not =deferToThread=

* Twisted in blocking code

** New hotness!

   =itamarst/crochet=

   * Runs the Twisted reactor in a thread
   * Makes =logging= magically work
   * Blocking interface to =Deferred=

* Twisted in Gevent

** Water and fire, but it works...

   =jyio/geventreactor=

* Recap

** Twisted plays well with others
  * If you want to use Twisted, you probably can
  * That doesn't mean it's a good idea
    * although it probably is ;-)

* Questions?
